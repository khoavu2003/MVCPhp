Create database MovieDB;
use MovieDB;
CREATE TABLE Actor (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birthDate DATE,
    birthPlace VARCHAR(255) DEFAULT '',
    description TEXT DEFAULT '',
    profileImage VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ActorPhotos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    actorId INT NOT NULL,
    photoUrl VARCHAR(255),
    FOREIGN KEY (actorId) REFERENCES Actor(id) ON DELETE CASCADE
);

CREATE TABLE Genre (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Movie (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    releaseYear INT NOT NULL,
    director VARCHAR(255) NOT NULL,
    poster VARCHAR(255) NOT NULL,
    trailer VARCHAR(255),
    theatricalReleaseDate DATE,
    bannerImage VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE MovieGenre (
    id INT AUTO_INCREMENT PRIMARY KEY,
    movieId INT NOT NULL,
    genreId INT NOT NULL,
    FOREIGN KEY (movieId) REFERENCES Movie(id) ON DELETE CASCADE,
    FOREIGN KEY (genreId) REFERENCES Genre(id) ON DELETE CASCADE
);

CREATE TABLE MovieActor (
    id INT AUTO_INCREMENT PRIMARY KEY,
    movieId INT NOT NULL,
    actorId INT NOT NULL,
    FOREIGN KEY (movieId) REFERENCES Movie(id) ON DELETE CASCADE,
    FOREIGN KEY (actorId) REFERENCES Actor(id) ON DELETE CASCADE
);

CREATE TABLE User (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('user', 'admin') DEFAULT 'user'
);

CREATE TABLE Watchlist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT '',
    userId INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE WatchlistMovies (
    id INT AUTO_INCREMENT PRIMARY KEY,
    watchlistId INT NOT NULL,
    movieId INT NOT NULL,
    FOREIGN KEY (watchlistId) REFERENCES Watchlist(id) ON DELETE CASCADE,
    FOREIGN KEY (movieId) REFERENCES Movie(id) ON DELETE CASCADE
);

CREATE TABLE MovieRatings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    movieId INT NOT NULL,
    userId INT NOT NULL,
    rating INT CHECK (rating BETWEEN 1 AND 10),
    FOREIGN KEY (movieId) REFERENCES Movie(id) ON DELETE CASCADE,
    FOREIGN KEY (userId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE MovieComments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    movieId INT NOT NULL,
    userId INT NOT NULL,
    comment TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (movieId) REFERENCES Movie(id) ON DELETE CASCADE,
    FOREIGN KEY (userId) REFERENCES User(id) ON DELETE CASCADE
);

CREATE TABLE ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    movieId INT NOT NULL,
    userId INT NOT NULL,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 10),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (movieId) REFERENCES Movie(id),
    FOREIGN KEY (userId) REFERENCES User(id),
    UNIQUE (movieId, userId)
);